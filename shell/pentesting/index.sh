#!/bin/bash

# Function to dynamically source all .sh scripts in the current directory
source_scripts() {
    for script in ./*.sh; do
        if [[ -f "$script" && "$script" != "./index.sh" ]]; then
            source "$script"
            echo "Sourced: $script"
        else
            echo "Warning: $script not found or is index.sh."
        fi
    done
}

# Function to run all scripts
run_all_scripts() {
    # Read the configuration file for parameters
    local config_file="config.json"

    # Use jq to parse the JSON configuration
    while read -r line; do
        # Extract values using jq
        scanner_type=$(echo "$line" | jq -r '.type')
        target_ip=$(echo "$line" | jq -r '.target_ip // empty')
        target_url=$(echo "$line" | jq -r '.target_url // empty')
        wordlist=$(echo "$line" | jq -r '.wordlist // empty')
        service=$(echo "$line" | jq -r '.service // empty')
        username=$(echo "$line" | jq -r '.username // empty')

        # Construct parameters for the scanner
        params=()
        [[ -n "$target_ip" ]] && params+=("$target_ip")
        [[ -n "$target_url" ]] && params+=("$target_url")
        [[ -n "$wordlist" ]] && params+=("$wordlist")
        [[ -n "$service" ]] && params+=("$service")
        [[ -n "$username" ]] && params+=("$username")

        # Run the corresponding scanner based on the type
        echo "Running scanner: $scanner_type with parameters: ${params[@]}"
        case "$scanner_type" in
            "network_scanner")
                network_scanner "${params[@]}"
                ;;
            "directory_scanner")
                directory_scanner "${params[@]}"
                ;;
            "password_cracker")
                password_cracker "${params[@]}"
                ;;
            "arp_spoof")
                arp_spoof "${params[@]}"
                ;;
            "traffic_capture")
                traffic_capture "${params[@]}"
                ;;
            "check_ports")
                check_ports "${params[@]}"
                ;;
            "xss_scanner")
                xss_scanner "${params[@]}"
                ;;
            "csrf_scanner")
                csrf_scanner "${params[@]}"
                ;;
            "rce_scanner")
                rce_scanner "${params[@]}"
                ;;
            *)
                echo "Unknown scanner type: $scanner_type"
                ;;
        esac
    done < <(jq -c '.scans[]' "$config_file")
}

# Function to display the menu
show_menu() {
    echo "Select an option:"
    echo "1) Network Scanner"
    echo "2) Web Directory Scanner"
    echo "3) Password Cracker"
    echo "4) ARP Spoofing"
    echo "5) Network Traffic Capture"
    echo "6) Check Open Ports"
    echo "7) XSS Scanner"
    echo "8) CSRF Scanner"
    echo "9) RCE Scanner"
    echo "0) Run All Scripts"
    echo "q) Exit"
}

# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo "Error: jq is not installed. Please install it to use this script."
    exit 1
fi

# Source other scripts
source_scripts

# Main loop
while true; do
    show_menu
    read -p "Enter your choice: " choice

    case $choice in
        1) 
            read -p "Enter target IP: " target_ip
            network_scanner "$target_ip"
            ;;
        2) 
            read -p "Enter target URL: " target_url
            read -p "Enter wordlist path: " wordlist
            directory_scanner "$target_url" "$wordlist"
            ;;
        3) 
            read -p "Enter service: " service
            read -p "Enter target IP: " target_ip
            read -p "Enter username: " username
            read -p "Enter wordlist path: " wordlist
            password_cracker "$service" "$target_ip" "$username" "$wordlist"
            ;;
        4) 
            read -p "Enter target IP: " target_ip
            read -p "Enter gateway IP: " gateway_ip
            arp_spoof "$target_ip" "$gateway_ip"
            ;;
        5) 
            read -p "Enter duration in seconds: " duration
            traffic_capture "$duration"
            ;;
        6) 
            read -p "Enter target IP: " target_ip
            check_ports "$target_ip"
            ;;
        7) 
            read -p "Enter target URL for XSS testing: " target_url
            xss_scanner "$target_url"
            ;;
        8) 
            read -p "Enter target URL for CSRF testing: " target_url
            csrf_scanner "$target_url"
            ;;
        9) 
            read -p "Enter target URL for RCE testing: " target_url
            rce_scanner "$target_url"
            ;;
        0) 
            echo "Running all scripts..."
            run_all_scripts
            ;;
        q) 
            echo "Exiting..."
            exit 0
            ;;
        *) 
            echo "Invalid option. Please try again."
            ;;
    esac
done
